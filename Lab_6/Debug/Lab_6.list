
Lab_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003020  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080031e4  080031e4  000041e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032e0  080032e0  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080032e0  080032e0  000042e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032e8  080032e8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032e8  080032e8  000042e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032ec  080032ec  000042ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080032f0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080032fc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080032fc  000050c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008dd4  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001874  00000000  00000000  0000de10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0000f688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b8  00000000  00000000  0000fe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020cdb  00000000  00000000  000103b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bf7  00000000  00000000  00031093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c80bf  00000000  00000000  0003ac8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102d49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d98  00000000  00000000  00102d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00104b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080031cc 	.word	0x080031cc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080031cc 	.word	0x080031cc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <DirLED_AllOff>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* ==== Helpers para LEDs direccionales en GPIOC (PC0..PC3) ==== */
static inline void DirLED_AllOff(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC, LED_LEFT_Pin|LED_DOWN_Pin|LED_RIGHT_Pin|LED_UP_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	210f      	movs	r1, #15
 8000538:	4802      	ldr	r0, [pc, #8]	@ (8000544 <DirLED_AllOff+0x14>)
 800053a:	f000 ffb7 	bl	80014ac <HAL_GPIO_WritePin>
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40020800 	.word	0x40020800

08000548 <DirLED_On>:

static inline void DirLED_On(uint16_t pin_on /* de los LED_*_Pin en GPIOC */)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	80fb      	strh	r3, [r7, #6]
  DirLED_AllOff();
 8000552:	f7ff ffed 	bl	8000530 <DirLED_AllOff>
  HAL_GPIO_WritePin(GPIOC, pin_on, GPIO_PIN_SET);
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	2201      	movs	r2, #1
 800055a:	4619      	mov	r1, r3
 800055c:	4803      	ldr	r0, [pc, #12]	@ (800056c <DirLED_On+0x24>)
 800055e:	f000 ffa5 	bl	80014ac <HAL_GPIO_WritePin>
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40020800 	.word	0x40020800

08000570 <ActionLEDs_AllOff>:

/* ==== Helpers para LEDs de ACCIÓN (puerto según *_GPIO_Port) ==== */
static inline void ActionLEDs_AllOff(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ACCION_A_GPIO_Port, ACCION_A_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2110      	movs	r1, #16
 8000578:	4804      	ldr	r0, [pc, #16]	@ (800058c <ActionLEDs_AllOff+0x1c>)
 800057a:	f000 ff97 	bl	80014ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ACCION_B_GPIO_Port, ACCION_B_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2120      	movs	r1, #32
 8000582:	4802      	ldr	r0, [pc, #8]	@ (800058c <ActionLEDs_AllOff+0x1c>)
 8000584:	f000 ff92 	bl	80014ac <HAL_GPIO_WritePin>
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40020400 	.word	0x40020400

08000590 <ActionLED_On>:

static inline void ActionLED_On(GPIO_TypeDef* port, uint16_t pin)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	807b      	strh	r3, [r7, #2]
  ActionLEDs_AllOff();
 800059c:	f7ff ffe8 	bl	8000570 <ActionLEDs_AllOff>
  HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 80005a0:	887b      	ldrh	r3, [r7, #2]
 80005a2:	2201      	movs	r2, #1
 80005a4:	4619      	mov	r1, r3
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 ff80 	bl	80014ac <HAL_GPIO_WritePin>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <HAL_UART_RxCpltCallback>:

/* Se llama cuando llega 1 byte por USART en modo IT */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  if (huart == &huart3)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a08      	ldr	r2, [pc, #32]	@ (80005e0 <HAL_UART_RxCpltCallback+0x2c>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d109      	bne.n	80005d8 <HAL_UART_RxCpltCallback+0x24>
  {
    ProcessCommand(rx3_byte);
 80005c4:	4b07      	ldr	r3, [pc, #28]	@ (80005e4 <HAL_UART_RxCpltCallback+0x30>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f82d 	bl	8000628 <ProcessCommand>

    // Re-armar recepción de 1 byte (MUY IMPORTANTE)
    HAL_UART_Receive_IT(&huart3, &rx3_byte, 1);
 80005ce:	2201      	movs	r2, #1
 80005d0:	4904      	ldr	r1, [pc, #16]	@ (80005e4 <HAL_UART_RxCpltCallback+0x30>)
 80005d2:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <HAL_UART_RxCpltCallback+0x2c>)
 80005d4:	f001 fe47 	bl	8002266 <HAL_UART_Receive_IT>
  }
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000070 	.word	0x20000070
 80005e4:	200000b8 	.word	0x200000b8

080005e8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  if (huart == &huart3)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a09      	ldr	r2, [pc, #36]	@ (8000618 <HAL_UART_ErrorCallback+0x30>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d10b      	bne.n	8000610 <HAL_UART_ErrorCallback+0x28>
  {
    DEBUG_TX2_STR("[USART3] Error UART\r\n");
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295
 80005fc:	2215      	movs	r2, #21
 80005fe:	4907      	ldr	r1, [pc, #28]	@ (800061c <HAL_UART_ErrorCallback+0x34>)
 8000600:	4807      	ldr	r0, [pc, #28]	@ (8000620 <HAL_UART_ErrorCallback+0x38>)
 8000602:	f001 fda5 	bl	8002150 <HAL_UART_Transmit>
    // Reintentar recepción
    HAL_UART_Receive_IT(&huart3, &rx3_byte, 1);
 8000606:	2201      	movs	r2, #1
 8000608:	4906      	ldr	r1, [pc, #24]	@ (8000624 <HAL_UART_ErrorCallback+0x3c>)
 800060a:	4803      	ldr	r0, [pc, #12]	@ (8000618 <HAL_UART_ErrorCallback+0x30>)
 800060c:	f001 fe2b 	bl	8002266 <HAL_UART_Receive_IT>
  }
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000070 	.word	0x20000070
 800061c:	080031e4 	.word	0x080031e4
 8000620:	20000028 	.word	0x20000028
 8000624:	200000b8 	.word	0x200000b8

08000628 <ProcessCommand>:

// Traduce comandos del ATmega
static void ProcessCommand(uint8_t c)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
  switch (c)
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b55      	cmp	r3, #85	@ 0x55
 8000636:	f300 8089 	bgt.w	800074c <ProcessCommand+0x124>
 800063a:	2b41      	cmp	r3, #65	@ 0x41
 800063c:	da06      	bge.n	800064c <ProcessCommand+0x24>
 800063e:	2b0a      	cmp	r3, #10
 8000640:	f000 809a 	beq.w	8000778 <ProcessCommand+0x150>
 8000644:	2b0d      	cmp	r3, #13
 8000646:	f000 8097 	beq.w	8000778 <ProcessCommand+0x150>
 800064a:	e07f      	b.n	800074c <ProcessCommand+0x124>
 800064c:	3b41      	subs	r3, #65	@ 0x41
 800064e:	2b14      	cmp	r3, #20
 8000650:	d87c      	bhi.n	800074c <ProcessCommand+0x124>
 8000652:	a201      	add	r2, pc, #4	@ (adr r2, 8000658 <ProcessCommand+0x30>)
 8000654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000658:	08000705 	.word	0x08000705
 800065c:	0800071d 	.word	0x0800071d
 8000660:	0800074d 	.word	0x0800074d
 8000664:	080006c3 	.word	0x080006c3
 8000668:	0800074d 	.word	0x0800074d
 800066c:	0800074d 	.word	0x0800074d
 8000670:	0800074d 	.word	0x0800074d
 8000674:	08000735 	.word	0x08000735
 8000678:	0800074d 	.word	0x0800074d
 800067c:	0800074d 	.word	0x0800074d
 8000680:	0800074d 	.word	0x0800074d
 8000684:	080006d9 	.word	0x080006d9
 8000688:	0800074d 	.word	0x0800074d
 800068c:	0800074d 	.word	0x0800074d
 8000690:	0800074d 	.word	0x0800074d
 8000694:	0800074d 	.word	0x0800074d
 8000698:	0800074d 	.word	0x0800074d
 800069c:	080006ef 	.word	0x080006ef
 80006a0:	0800074d 	.word	0x0800074d
 80006a4:	0800074d 	.word	0x0800074d
 80006a8:	080006ad 	.word	0x080006ad
  {
    case 'U':
      DEBUG_TX2_STR("CMD: UP\r\n");
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295
 80006b0:	2209      	movs	r2, #9
 80006b2:	4934      	ldr	r1, [pc, #208]	@ (8000784 <ProcessCommand+0x15c>)
 80006b4:	4834      	ldr	r0, [pc, #208]	@ (8000788 <ProcessCommand+0x160>)
 80006b6:	f001 fd4b 	bl	8002150 <HAL_UART_Transmit>
      DirLED_On(LED_UP_Pin);        // PC3
 80006ba:	2008      	movs	r0, #8
 80006bc:	f7ff ff44 	bl	8000548 <DirLED_On>
      break;
 80006c0:	e05b      	b.n	800077a <ProcessCommand+0x152>

    case 'D':
      DEBUG_TX2_STR("CMD: DOWN\r\n");
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	220b      	movs	r2, #11
 80006c8:	4930      	ldr	r1, [pc, #192]	@ (800078c <ProcessCommand+0x164>)
 80006ca:	482f      	ldr	r0, [pc, #188]	@ (8000788 <ProcessCommand+0x160>)
 80006cc:	f001 fd40 	bl	8002150 <HAL_UART_Transmit>
      DirLED_On(LED_DOWN_Pin);      // PC1
 80006d0:	2002      	movs	r0, #2
 80006d2:	f7ff ff39 	bl	8000548 <DirLED_On>
      break;
 80006d6:	e050      	b.n	800077a <ProcessCommand+0x152>

    case 'L':
      DEBUG_TX2_STR("CMD: LEFT\r\n");
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295
 80006dc:	220b      	movs	r2, #11
 80006de:	492c      	ldr	r1, [pc, #176]	@ (8000790 <ProcessCommand+0x168>)
 80006e0:	4829      	ldr	r0, [pc, #164]	@ (8000788 <ProcessCommand+0x160>)
 80006e2:	f001 fd35 	bl	8002150 <HAL_UART_Transmit>
      DirLED_On(LED_LEFT_Pin);      // PC0
 80006e6:	2001      	movs	r0, #1
 80006e8:	f7ff ff2e 	bl	8000548 <DirLED_On>
      break;
 80006ec:	e045      	b.n	800077a <ProcessCommand+0x152>

    case 'R':
      DEBUG_TX2_STR("CMD: RIGHT\r\n");
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295
 80006f2:	220c      	movs	r2, #12
 80006f4:	4927      	ldr	r1, [pc, #156]	@ (8000794 <ProcessCommand+0x16c>)
 80006f6:	4824      	ldr	r0, [pc, #144]	@ (8000788 <ProcessCommand+0x160>)
 80006f8:	f001 fd2a 	bl	8002150 <HAL_UART_Transmit>
      DirLED_On(LED_RIGHT_Pin);     // PC2
 80006fc:	2004      	movs	r0, #4
 80006fe:	f7ff ff23 	bl	8000548 <DirLED_On>
      break;
 8000702:	e03a      	b.n	800077a <ProcessCommand+0x152>

    case 'A':
      DEBUG_TX2_STR("CMD: ACTION A\r\n");
 8000704:	f04f 33ff 	mov.w	r3, #4294967295
 8000708:	220f      	movs	r2, #15
 800070a:	4923      	ldr	r1, [pc, #140]	@ (8000798 <ProcessCommand+0x170>)
 800070c:	481e      	ldr	r0, [pc, #120]	@ (8000788 <ProcessCommand+0x160>)
 800070e:	f001 fd1f 	bl	8002150 <HAL_UART_Transmit>
      ActionLED_On(ACCION_A_GPIO_Port, ACCION_A_Pin); // enciende A, apaga B
 8000712:	2110      	movs	r1, #16
 8000714:	4821      	ldr	r0, [pc, #132]	@ (800079c <ProcessCommand+0x174>)
 8000716:	f7ff ff3b 	bl	8000590 <ActionLED_On>
      break;
 800071a:	e02e      	b.n	800077a <ProcessCommand+0x152>

    case 'B':
      DEBUG_TX2_STR("CMD: ACTION B\r\n");
 800071c:	f04f 33ff 	mov.w	r3, #4294967295
 8000720:	220f      	movs	r2, #15
 8000722:	491f      	ldr	r1, [pc, #124]	@ (80007a0 <ProcessCommand+0x178>)
 8000724:	4818      	ldr	r0, [pc, #96]	@ (8000788 <ProcessCommand+0x160>)
 8000726:	f001 fd13 	bl	8002150 <HAL_UART_Transmit>
      ActionLED_On(ACCION_B_GPIO_Port, ACCION_B_Pin); // enciende B, apaga A
 800072a:	2120      	movs	r1, #32
 800072c:	481b      	ldr	r0, [pc, #108]	@ (800079c <ProcessCommand+0x174>)
 800072e:	f7ff ff2f 	bl	8000590 <ActionLED_On>
      break;
 8000732:	e022      	b.n	800077a <ProcessCommand+0x152>

    case 'H':
      DEBUG_TX2_STR("PULSA UN BOTON\r\n");
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
 8000738:	2210      	movs	r2, #16
 800073a:	491a      	ldr	r1, [pc, #104]	@ (80007a4 <ProcessCommand+0x17c>)
 800073c:	4812      	ldr	r0, [pc, #72]	@ (8000788 <ProcessCommand+0x160>)
 800073e:	f001 fd07 	bl	8002150 <HAL_UART_Transmit>
      DirLED_AllOff();              // apaga direccionales
 8000742:	f7ff fef5 	bl	8000530 <DirLED_AllOff>
      ActionLEDs_AllOff();          // apaga acciones
 8000746:	f7ff ff13 	bl	8000570 <ActionLEDs_AllOff>
      break;
 800074a:	e016      	b.n	800077a <ProcessCommand+0x152>
    case '\r':
    case '\n': /* ignorar */
      break;

    default:
      DEBUG_TX2_STR("RX: ");
 800074c:	f04f 33ff 	mov.w	r3, #4294967295
 8000750:	2204      	movs	r2, #4
 8000752:	4915      	ldr	r1, [pc, #84]	@ (80007a8 <ProcessCommand+0x180>)
 8000754:	480c      	ldr	r0, [pc, #48]	@ (8000788 <ProcessCommand+0x160>)
 8000756:	f001 fcfb 	bl	8002150 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, &c, 1, HAL_MAX_DELAY);
 800075a:	1df9      	adds	r1, r7, #7
 800075c:	f04f 33ff 	mov.w	r3, #4294967295
 8000760:	2201      	movs	r2, #1
 8000762:	4809      	ldr	r0, [pc, #36]	@ (8000788 <ProcessCommand+0x160>)
 8000764:	f001 fcf4 	bl	8002150 <HAL_UART_Transmit>
      DEBUG_TX2_STR("\r\n");
 8000768:	f04f 33ff 	mov.w	r3, #4294967295
 800076c:	2202      	movs	r2, #2
 800076e:	490f      	ldr	r1, [pc, #60]	@ (80007ac <ProcessCommand+0x184>)
 8000770:	4805      	ldr	r0, [pc, #20]	@ (8000788 <ProcessCommand+0x160>)
 8000772:	f001 fced 	bl	8002150 <HAL_UART_Transmit>
      break;
 8000776:	e000      	b.n	800077a <ProcessCommand+0x152>
      break;
 8000778:	bf00      	nop
  }
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	080031fc 	.word	0x080031fc
 8000788:	20000028 	.word	0x20000028
 800078c:	08003208 	.word	0x08003208
 8000790:	08003214 	.word	0x08003214
 8000794:	08003220 	.word	0x08003220
 8000798:	08003230 	.word	0x08003230
 800079c:	40020400 	.word	0x40020400
 80007a0:	08003240 	.word	0x08003240
 80007a4:	08003250 	.word	0x08003250
 80007a8:	08003264 	.word	0x08003264
 80007ac:	0800326c 	.word	0x0800326c

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b4:	f000 fad0 	bl	8000d58 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b8:	f000 f826 	bl	8000808 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007bc:	f000 f8e6 	bl	800098c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007c0:	f000 f890 	bl	80008e4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80007c4:	f000 f8b8 	bl	8000938 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Mensajes por el VCP (USART2 @115200)
  DEBUG_TX2_STR("\r\n=== Nucleo-F446RE: USART3 RX @9600 ===\r\n");
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	222a      	movs	r2, #42	@ 0x2a
 80007ce:	4909      	ldr	r1, [pc, #36]	@ (80007f4 <main+0x44>)
 80007d0:	4809      	ldr	r0, [pc, #36]	@ (80007f8 <main+0x48>)
 80007d2:	f001 fcbd 	bl	8002150 <HAL_UART_Transmit>
  DEBUG_TX2_STR("Pins: PB10=USART3_TX, PC5=USART3_RX (AF7)\r\n");
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	222b      	movs	r2, #43	@ 0x2b
 80007dc:	4907      	ldr	r1, [pc, #28]	@ (80007fc <main+0x4c>)
 80007de:	4806      	ldr	r0, [pc, #24]	@ (80007f8 <main+0x48>)
 80007e0:	f001 fcb6 	bl	8002150 <HAL_UART_Transmit>

  // Armar recepción por interrupción de 1 byte
  HAL_UART_Receive_IT(&huart3, &rx3_byte, 1);
 80007e4:	2201      	movs	r2, #1
 80007e6:	4906      	ldr	r1, [pc, #24]	@ (8000800 <main+0x50>)
 80007e8:	4806      	ldr	r0, [pc, #24]	@ (8000804 <main+0x54>)
 80007ea:	f001 fd3c 	bl	8002266 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ee:	bf00      	nop
 80007f0:	e7fd      	b.n	80007ee <main+0x3e>
 80007f2:	bf00      	nop
 80007f4:	08003270 	.word	0x08003270
 80007f8:	20000028 	.word	0x20000028
 80007fc:	0800329c 	.word	0x0800329c
 8000800:	200000b8 	.word	0x200000b8
 8000804:	20000070 	.word	0x20000070

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b094      	sub	sp, #80	@ 0x50
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	2234      	movs	r2, #52	@ 0x34
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f002 fcac 	bl	8003174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	4b2a      	ldr	r3, [pc, #168]	@ (80008dc <SystemClock_Config+0xd4>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000834:	4a29      	ldr	r2, [pc, #164]	@ (80008dc <SystemClock_Config+0xd4>)
 8000836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083a:	6413      	str	r3, [r2, #64]	@ 0x40
 800083c:	4b27      	ldr	r3, [pc, #156]	@ (80008dc <SystemClock_Config+0xd4>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000848:	2300      	movs	r3, #0
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	4b24      	ldr	r3, [pc, #144]	@ (80008e0 <SystemClock_Config+0xd8>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000854:	4a22      	ldr	r2, [pc, #136]	@ (80008e0 <SystemClock_Config+0xd8>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b20      	ldr	r3, [pc, #128]	@ (80008e0 <SystemClock_Config+0xd8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000868:	2302      	movs	r3, #2
 800086a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086c:	2301      	movs	r3, #1
 800086e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000870:	2310      	movs	r3, #16
 8000872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000874:	2302      	movs	r3, #2
 8000876:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000878:	2300      	movs	r3, #0
 800087a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800087c:	2310      	movs	r3, #16
 800087e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000880:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000884:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000886:	2304      	movs	r3, #4
 8000888:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800088e:	2302      	movs	r3, #2
 8000890:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4618      	mov	r0, r3
 8000898:	f001 f96c 	bl	8001b74 <HAL_RCC_OscConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008a2:	f000 f90f 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a6:	230f      	movs	r3, #15
 80008a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008aa:	2302      	movs	r3, #2
 80008ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	2102      	movs	r1, #2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fe0c 	bl	80014e0 <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008ce:	f000 f8f9 	bl	8000ac4 <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3750      	adds	r7, #80	@ 0x50
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000

080008e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	@ (8000934 <MX_USART2_UART_Init+0x50>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 800091c:	f001 fbc8 	bl	80020b0 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000926:	f000 f8cd 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000028 	.word	0x20000028
 8000934:	40004400 	.word	0x40004400

08000938 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800093c:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_USART3_UART_Init+0x4c>)
 800093e:	4a12      	ldr	r2, [pc, #72]	@ (8000988 <MX_USART3_UART_Init+0x50>)
 8000940:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000942:	4b10      	ldr	r3, [pc, #64]	@ (8000984 <MX_USART3_UART_Init+0x4c>)
 8000944:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000948:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <MX_USART3_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <MX_USART3_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	@ (8000984 <MX_USART3_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <MX_USART3_UART_Init+0x4c>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <MX_USART3_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <MX_USART3_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	@ (8000984 <MX_USART3_UART_Init+0x4c>)
 8000970:	f001 fb9e 	bl	80020b0 <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800097a:	f000 f8a3 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000070 	.word	0x20000070
 8000988:	40004800 	.word	0x40004800

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	@ 0x28
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b43      	ldr	r3, [pc, #268]	@ (8000ab4 <MX_GPIO_Init+0x128>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a42      	ldr	r2, [pc, #264]	@ (8000ab4 <MX_GPIO_Init+0x128>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b40      	ldr	r3, [pc, #256]	@ (8000ab4 <MX_GPIO_Init+0x128>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ab4 <MX_GPIO_Init+0x128>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a3b      	ldr	r2, [pc, #236]	@ (8000ab4 <MX_GPIO_Init+0x128>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b39      	ldr	r3, [pc, #228]	@ (8000ab4 <MX_GPIO_Init+0x128>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	4b35      	ldr	r3, [pc, #212]	@ (8000ab4 <MX_GPIO_Init+0x128>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a34      	ldr	r2, [pc, #208]	@ (8000ab4 <MX_GPIO_Init+0x128>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b32      	ldr	r3, [pc, #200]	@ (8000ab4 <MX_GPIO_Init+0x128>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab4 <MX_GPIO_Init+0x128>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a2d      	ldr	r2, [pc, #180]	@ (8000ab4 <MX_GPIO_Init+0x128>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab4 <MX_GPIO_Init+0x128>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_LEFT_Pin|LED_DOWN_Pin|LED_RIGHT_Pin|LED_UP_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	210f      	movs	r1, #15
 8000a16:	4828      	ldr	r0, [pc, #160]	@ (8000ab8 <MX_GPIO_Init+0x12c>)
 8000a18:	f000 fd48 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2120      	movs	r1, #32
 8000a20:	4826      	ldr	r0, [pc, #152]	@ (8000abc <MX_GPIO_Init+0x130>)
 8000a22:	f000 fd43 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACCION_A_Pin|ACCION_B_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2130      	movs	r1, #48	@ 0x30
 8000a2a:	4825      	ldr	r0, [pc, #148]	@ (8000ac0 <MX_GPIO_Init+0x134>)
 8000a2c:	f000 fd3e 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a36:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	481c      	ldr	r0, [pc, #112]	@ (8000ab8 <MX_GPIO_Init+0x12c>)
 8000a48:	f000 fb9c 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_LEFT_Pin LED_DOWN_Pin LED_RIGHT_Pin LED_UP_Pin */
  GPIO_InitStruct.Pin = LED_LEFT_Pin|LED_DOWN_Pin|LED_RIGHT_Pin|LED_UP_Pin;
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	4815      	ldr	r0, [pc, #84]	@ (8000ab8 <MX_GPIO_Init+0x12c>)
 8000a64:	f000 fb8e 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a68:	2320      	movs	r3, #32
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480f      	ldr	r0, [pc, #60]	@ (8000abc <MX_GPIO_Init+0x130>)
 8000a80:	f000 fb80 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCION_A_Pin ACCION_B_Pin */
  GPIO_InitStruct.Pin = ACCION_A_Pin|ACCION_B_Pin;
 8000a84:	2330      	movs	r3, #48	@ 0x30
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACCION_A_GPIO_Port, &GPIO_InitStruct); // A
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4809      	ldr	r0, [pc, #36]	@ (8000ac0 <MX_GPIO_Init+0x134>)
 8000a9c:	f000 fb72 	bl	8001184 <HAL_GPIO_Init>
  HAL_GPIO_Init(ACCION_B_GPIO_Port, &GPIO_InitStruct); // B
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4806      	ldr	r0, [pc, #24]	@ (8000ac0 <MX_GPIO_Init+0x134>)
 8000aa8:	f000 fb6c 	bl	8001184 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	@ 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020800 	.word	0x40020800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40020400 	.word	0x40020400

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <Error_Handler+0x8>

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ade:	4a0f      	ldr	r2, [pc, #60]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b0e:	2007      	movs	r0, #7
 8000b10:	f000 fa64 	bl	8000fdc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08c      	sub	sp, #48	@ 0x30
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a45      	ldr	r2, [pc, #276]	@ (8000c54 <HAL_UART_MspInit+0x134>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d12c      	bne.n	8000b9c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
 8000b46:	4b44      	ldr	r3, [pc, #272]	@ (8000c58 <HAL_UART_MspInit+0x138>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4a:	4a43      	ldr	r2, [pc, #268]	@ (8000c58 <HAL_UART_MspInit+0x138>)
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b52:	4b41      	ldr	r3, [pc, #260]	@ (8000c58 <HAL_UART_MspInit+0x138>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	4b3d      	ldr	r3, [pc, #244]	@ (8000c58 <HAL_UART_MspInit+0x138>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a3c      	ldr	r2, [pc, #240]	@ (8000c58 <HAL_UART_MspInit+0x138>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c58 <HAL_UART_MspInit+0x138>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8a:	2307      	movs	r3, #7
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	4831      	ldr	r0, [pc, #196]	@ (8000c5c <HAL_UART_MspInit+0x13c>)
 8000b96:	f000 faf5 	bl	8001184 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b9a:	e057      	b.n	8000c4c <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8000c60 <HAL_UART_MspInit+0x140>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d152      	bne.n	8000c4c <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b2b      	ldr	r3, [pc, #172]	@ (8000c58 <HAL_UART_MspInit+0x138>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	4a2a      	ldr	r2, [pc, #168]	@ (8000c58 <HAL_UART_MspInit+0x138>)
 8000bb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb6:	4b28      	ldr	r3, [pc, #160]	@ (8000c58 <HAL_UART_MspInit+0x138>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b24      	ldr	r3, [pc, #144]	@ (8000c58 <HAL_UART_MspInit+0x138>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a23      	ldr	r2, [pc, #140]	@ (8000c58 <HAL_UART_MspInit+0x138>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b21      	ldr	r3, [pc, #132]	@ (8000c58 <HAL_UART_MspInit+0x138>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c58 <HAL_UART_MspInit+0x138>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c58 <HAL_UART_MspInit+0x138>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b1a      	ldr	r3, [pc, #104]	@ (8000c58 <HAL_UART_MspInit+0x138>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bfa:	2320      	movs	r3, #32
 8000bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c06:	2302      	movs	r3, #2
 8000c08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c0a:	2307      	movs	r3, #7
 8000c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4813      	ldr	r0, [pc, #76]	@ (8000c64 <HAL_UART_MspInit+0x144>)
 8000c16:	f000 fab5 	bl	8001184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	4619      	mov	r1, r3
 8000c36:	480c      	ldr	r0, [pc, #48]	@ (8000c68 <HAL_UART_MspInit+0x148>)
 8000c38:	f000 faa4 	bl	8001184 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2027      	movs	r0, #39	@ 0x27
 8000c42:	f000 f9d6 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c46:	2027      	movs	r0, #39	@ 0x27
 8000c48:	f000 f9ef 	bl	800102a <HAL_NVIC_EnableIRQ>
}
 8000c4c:	bf00      	nop
 8000c4e:	3730      	adds	r7, #48	@ 0x30
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40004400 	.word	0x40004400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40004800 	.word	0x40004800
 8000c64:	40020800 	.word	0x40020800
 8000c68:	40020400 	.word	0x40020400

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <NMI_Handler+0x4>

08000c74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <MemManage_Handler+0x4>

08000c84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc2:	f000 f89b 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cd0:	4802      	ldr	r0, [pc, #8]	@ (8000cdc <USART3_IRQHandler+0x10>)
 8000cd2:	f001 faed 	bl	80022b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000070 	.word	0x20000070

08000ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d08:	f7ff ffea 	bl	8000ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d0c:	480c      	ldr	r0, [pc, #48]	@ (8000d40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d0e:	490d      	ldr	r1, [pc, #52]	@ (8000d44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d10:	4a0d      	ldr	r2, [pc, #52]	@ (8000d48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d24:	4c0a      	ldr	r4, [pc, #40]	@ (8000d50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d32:	f002 fa27 	bl	8003184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d36:	f7ff fd3b 	bl	80007b0 <main>
  bx  lr    
 8000d3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d48:	080032f0 	.word	0x080032f0
  ldr r2, =_sbss
 8000d4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d50:	200000c0 	.word	0x200000c0

08000d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC_IRQHandler>
	...

08000d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0d      	ldr	r2, [pc, #52]	@ (8000d98 <HAL_Init+0x40>)
 8000d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d68:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <HAL_Init+0x40>)
 8000d6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a07      	ldr	r2, [pc, #28]	@ (8000d98 <HAL_Init+0x40>)
 8000d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 f92b 	bl	8000fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 f808 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8c:	f7ff fea0 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023c00 	.word	0x40023c00

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <HAL_InitTick+0x54>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <HAL_InitTick+0x58>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f943 	bl	8001046 <HAL_SYSTICK_Config>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00e      	b.n	8000de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d80a      	bhi.n	8000de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f000 f90b 	bl	8000ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ddc:	4a06      	ldr	r2, [pc, #24]	@ (8000df8 <HAL_InitTick+0x5c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e000      	b.n	8000de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000004 	.word	0x20000004

08000dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	@ (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	200000bc 	.word	0x200000bc

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b03      	ldr	r3, [pc, #12]	@ (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	200000bc 	.word	0x200000bc

08000e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	@ (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e88:	4b04      	ldr	r3, [pc, #16]	@ (8000e9c <__NVIC_GetPriorityGrouping+0x18>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	f003 0307 	and.w	r3, r3, #7
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db0b      	blt.n	8000eca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	4907      	ldr	r1, [pc, #28]	@ (8000ed8 <__NVIC_EnableIRQ+0x38>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	490c      	ldr	r1, [pc, #48]	@ (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4908      	ldr	r1, [pc, #32]	@ (8000f2c <__NVIC_SetPriority+0x50>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	3b04      	subs	r3, #4
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	@ 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4313      	orrs	r3, r2
         );
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3724      	adds	r7, #36	@ 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa8:	d301      	bcc.n	8000fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00f      	b.n	8000fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <SysTick_Config+0x40>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f7ff ff8e 	bl	8000edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <SysTick_Config+0x40>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc6:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <SysTick_Config+0x40>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff29 	bl	8000e3c <__NVIC_SetPriorityGrouping>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001004:	f7ff ff3e 	bl	8000e84 <__NVIC_GetPriorityGrouping>
 8001008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	6978      	ldr	r0, [r7, #20]
 8001010:	f7ff ff8e 	bl	8000f30 <NVIC_EncodePriority>
 8001014:	4602      	mov	r2, r0
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff5d 	bl	8000edc <__NVIC_SetPriority>
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff31 	bl	8000ea0 <__NVIC_EnableIRQ>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffa2 	bl	8000f98 <SysTick_Config>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff feda 	bl	8000e24 <HAL_GetTick>
 8001070:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d008      	beq.n	8001090 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2280      	movs	r2, #128	@ 0x80
 8001082:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e052      	b.n	8001136 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0216 	bic.w	r2, r2, #22
 800109e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	695a      	ldr	r2, [r3, #20]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d103      	bne.n	80010c0 <HAL_DMA_Abort+0x62>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d007      	beq.n	80010d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0208 	bic.w	r2, r2, #8
 80010ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0201 	bic.w	r2, r2, #1
 80010de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010e0:	e013      	b.n	800110a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010e2:	f7ff fe9f 	bl	8000e24 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b05      	cmp	r3, #5
 80010ee:	d90c      	bls.n	800110a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2220      	movs	r2, #32
 80010f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2203      	movs	r2, #3
 80010fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e015      	b.n	8001136 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1e4      	bne.n	80010e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800111c:	223f      	movs	r2, #63	@ 0x3f
 800111e:	409a      	lsls	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d004      	beq.n	800115c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2280      	movs	r2, #128	@ 0x80
 8001156:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e00c      	b.n	8001176 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2205      	movs	r2, #5
 8001160:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0201 	bic.w	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	@ 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	e165      	b.n	800146c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	f040 8154 	bne.w	8001466 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d005      	beq.n	80011d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d130      	bne.n	8001238 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800120c:	2201      	movs	r2, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	f003 0201 	and.w	r2, r3, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b03      	cmp	r3, #3
 8001242:	d017      	beq.n	8001274 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d123      	bne.n	80012c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	08da      	lsrs	r2, r3, #3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3208      	adds	r2, #8
 8001288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	220f      	movs	r2, #15
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	69b9      	ldr	r1, [r7, #24]
 80012c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0203 	and.w	r2, r3, #3
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80ae 	beq.w	8001466 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b5d      	ldr	r3, [pc, #372]	@ (8001484 <HAL_GPIO_Init+0x300>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001312:	4a5c      	ldr	r2, [pc, #368]	@ (8001484 <HAL_GPIO_Init+0x300>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001318:	6453      	str	r3, [r2, #68]	@ 0x44
 800131a:	4b5a      	ldr	r3, [pc, #360]	@ (8001484 <HAL_GPIO_Init+0x300>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001326:	4a58      	ldr	r2, [pc, #352]	@ (8001488 <HAL_GPIO_Init+0x304>)
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	3302      	adds	r3, #2
 800132e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4f      	ldr	r2, [pc, #316]	@ (800148c <HAL_GPIO_Init+0x308>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d025      	beq.n	800139e <HAL_GPIO_Init+0x21a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4e      	ldr	r2, [pc, #312]	@ (8001490 <HAL_GPIO_Init+0x30c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d01f      	beq.n	800139a <HAL_GPIO_Init+0x216>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4d      	ldr	r2, [pc, #308]	@ (8001494 <HAL_GPIO_Init+0x310>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d019      	beq.n	8001396 <HAL_GPIO_Init+0x212>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4c      	ldr	r2, [pc, #304]	@ (8001498 <HAL_GPIO_Init+0x314>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d013      	beq.n	8001392 <HAL_GPIO_Init+0x20e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4b      	ldr	r2, [pc, #300]	@ (800149c <HAL_GPIO_Init+0x318>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00d      	beq.n	800138e <HAL_GPIO_Init+0x20a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4a      	ldr	r2, [pc, #296]	@ (80014a0 <HAL_GPIO_Init+0x31c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d007      	beq.n	800138a <HAL_GPIO_Init+0x206>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a49      	ldr	r2, [pc, #292]	@ (80014a4 <HAL_GPIO_Init+0x320>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_GPIO_Init+0x202>
 8001382:	2306      	movs	r3, #6
 8001384:	e00c      	b.n	80013a0 <HAL_GPIO_Init+0x21c>
 8001386:	2307      	movs	r3, #7
 8001388:	e00a      	b.n	80013a0 <HAL_GPIO_Init+0x21c>
 800138a:	2305      	movs	r3, #5
 800138c:	e008      	b.n	80013a0 <HAL_GPIO_Init+0x21c>
 800138e:	2304      	movs	r3, #4
 8001390:	e006      	b.n	80013a0 <HAL_GPIO_Init+0x21c>
 8001392:	2303      	movs	r3, #3
 8001394:	e004      	b.n	80013a0 <HAL_GPIO_Init+0x21c>
 8001396:	2302      	movs	r3, #2
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_Init+0x21c>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <HAL_GPIO_Init+0x21c>
 800139e:	2300      	movs	r3, #0
 80013a0:	69fa      	ldr	r2, [r7, #28]
 80013a2:	f002 0203 	and.w	r2, r2, #3
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	4093      	lsls	r3, r2
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013b0:	4935      	ldr	r1, [pc, #212]	@ (8001488 <HAL_GPIO_Init+0x304>)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013be:	4b3a      	ldr	r3, [pc, #232]	@ (80014a8 <HAL_GPIO_Init+0x324>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013e2:	4a31      	ldr	r2, [pc, #196]	@ (80014a8 <HAL_GPIO_Init+0x324>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e8:	4b2f      	ldr	r3, [pc, #188]	@ (80014a8 <HAL_GPIO_Init+0x324>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800140c:	4a26      	ldr	r2, [pc, #152]	@ (80014a8 <HAL_GPIO_Init+0x324>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001412:	4b25      	ldr	r3, [pc, #148]	@ (80014a8 <HAL_GPIO_Init+0x324>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001436:	4a1c      	ldr	r2, [pc, #112]	@ (80014a8 <HAL_GPIO_Init+0x324>)
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800143c:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <HAL_GPIO_Init+0x324>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001460:	4a11      	ldr	r2, [pc, #68]	@ (80014a8 <HAL_GPIO_Init+0x324>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3301      	adds	r3, #1
 800146a:	61fb      	str	r3, [r7, #28]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	2b0f      	cmp	r3, #15
 8001470:	f67f ae96 	bls.w	80011a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3724      	adds	r7, #36	@ 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800
 8001488:	40013800 	.word	0x40013800
 800148c:	40020000 	.word	0x40020000
 8001490:	40020400 	.word	0x40020400
 8001494:	40020800 	.word	0x40020800
 8001498:	40020c00 	.word	0x40020c00
 800149c:	40021000 	.word	0x40021000
 80014a0:	40021400 	.word	0x40021400
 80014a4:	40021800 	.word	0x40021800
 80014a8:	40013c00 	.word	0x40013c00

080014ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
 80014b8:	4613      	mov	r3, r2
 80014ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014bc:	787b      	ldrb	r3, [r7, #1]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c8:	e003      	b.n	80014d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	041a      	lsls	r2, r3, #16
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	619a      	str	r2, [r3, #24]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0cc      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014f4:	4b68      	ldr	r3, [pc, #416]	@ (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 030f 	and.w	r3, r3, #15
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d90c      	bls.n	800151c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b65      	ldr	r3, [pc, #404]	@ (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b63      	ldr	r3, [pc, #396]	@ (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0b8      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d020      	beq.n	800156a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001534:	4b59      	ldr	r3, [pc, #356]	@ (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	4a58      	ldr	r2, [pc, #352]	@ (800169c <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800153e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800154c:	4b53      	ldr	r3, [pc, #332]	@ (800169c <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4a52      	ldr	r2, [pc, #328]	@ (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001558:	4b50      	ldr	r3, [pc, #320]	@ (800169c <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	494d      	ldr	r1, [pc, #308]	@ (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	4313      	orrs	r3, r2
 8001568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d044      	beq.n	8001600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d107      	bne.n	800158e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	4b47      	ldr	r3, [pc, #284]	@ (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d119      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e07f      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d003      	beq.n	800159e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800159a:	2b03      	cmp	r3, #3
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159e:	4b3f      	ldr	r3, [pc, #252]	@ (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e06f      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ae:	4b3b      	ldr	r3, [pc, #236]	@ (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e067      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015be:	4b37      	ldr	r3, [pc, #220]	@ (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f023 0203 	bic.w	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4934      	ldr	r1, [pc, #208]	@ (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d0:	f7ff fc28 	bl	8000e24 <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d8:	f7ff fc24 	bl	8000e24 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e04f      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ee:	4b2b      	ldr	r3, [pc, #172]	@ (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 020c 	and.w	r2, r3, #12
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d1eb      	bne.n	80015d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001600:	4b25      	ldr	r3, [pc, #148]	@ (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 030f 	and.w	r3, r3, #15
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d20c      	bcs.n	8001628 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b22      	ldr	r3, [pc, #136]	@ (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001616:	4b20      	ldr	r3, [pc, #128]	@ (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e032      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d008      	beq.n	8001646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001634:	4b19      	ldr	r3, [pc, #100]	@ (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4916      	ldr	r1, [pc, #88]	@ (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	4313      	orrs	r3, r2
 8001644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d009      	beq.n	8001666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001652:	4b12      	ldr	r3, [pc, #72]	@ (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	490e      	ldr	r1, [pc, #56]	@ (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001666:	f000 f855 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 800166a:	4602      	mov	r2, r0
 800166c:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	490a      	ldr	r1, [pc, #40]	@ (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001678:	5ccb      	ldrb	r3, [r1, r3]
 800167a:	fa22 f303 	lsr.w	r3, r2, r3
 800167e:	4a09      	ldr	r2, [pc, #36]	@ (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001682:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fb88 	bl	8000d9c <HAL_InitTick>

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023c00 	.word	0x40023c00
 800169c:	40023800 	.word	0x40023800
 80016a0:	080032c8 	.word	0x080032c8
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000004 	.word	0x20000004

080016ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016b0:	4b03      	ldr	r3, [pc, #12]	@ (80016c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000000 	.word	0x20000000

080016c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016c8:	f7ff fff0 	bl	80016ac <HAL_RCC_GetHCLKFreq>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	0a9b      	lsrs	r3, r3, #10
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	4903      	ldr	r1, [pc, #12]	@ (80016e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016da:	5ccb      	ldrb	r3, [r1, r3]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40023800 	.word	0x40023800
 80016e8:	080032d8 	.word	0x080032d8

080016ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016f0:	f7ff ffdc 	bl	80016ac <HAL_RCC_GetHCLKFreq>
 80016f4:	4602      	mov	r2, r0
 80016f6:	4b05      	ldr	r3, [pc, #20]	@ (800170c <HAL_RCC_GetPCLK2Freq+0x20>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	0b5b      	lsrs	r3, r3, #13
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	4903      	ldr	r1, [pc, #12]	@ (8001710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001702:	5ccb      	ldrb	r3, [r1, r3]
 8001704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001708:	4618      	mov	r0, r3
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40023800 	.word	0x40023800
 8001710:	080032d8 	.word	0x080032d8

08001714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001718:	b0ae      	sub	sp, #184	@ 0xb8
 800171a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800172e:	2300      	movs	r3, #0
 8001730:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800173a:	4bcb      	ldr	r3, [pc, #812]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x354>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b0c      	cmp	r3, #12
 8001744:	f200 8206 	bhi.w	8001b54 <HAL_RCC_GetSysClockFreq+0x440>
 8001748:	a201      	add	r2, pc, #4	@ (adr r2, 8001750 <HAL_RCC_GetSysClockFreq+0x3c>)
 800174a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174e:	bf00      	nop
 8001750:	08001785 	.word	0x08001785
 8001754:	08001b55 	.word	0x08001b55
 8001758:	08001b55 	.word	0x08001b55
 800175c:	08001b55 	.word	0x08001b55
 8001760:	0800178d 	.word	0x0800178d
 8001764:	08001b55 	.word	0x08001b55
 8001768:	08001b55 	.word	0x08001b55
 800176c:	08001b55 	.word	0x08001b55
 8001770:	08001795 	.word	0x08001795
 8001774:	08001b55 	.word	0x08001b55
 8001778:	08001b55 	.word	0x08001b55
 800177c:	08001b55 	.word	0x08001b55
 8001780:	08001985 	.word	0x08001985
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001784:	4bb9      	ldr	r3, [pc, #740]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x358>)
 8001786:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800178a:	e1e7      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800178c:	4bb8      	ldr	r3, [pc, #736]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x35c>)
 800178e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001792:	e1e3      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001794:	4bb4      	ldr	r3, [pc, #720]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800179c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017a0:	4bb1      	ldr	r3, [pc, #708]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x354>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d071      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ac:	4bae      	ldr	r3, [pc, #696]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	099b      	lsrs	r3, r3, #6
 80017b2:	2200      	movs	r2, #0
 80017b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80017b8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80017bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80017ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80017d2:	4622      	mov	r2, r4
 80017d4:	462b      	mov	r3, r5
 80017d6:	f04f 0000 	mov.w	r0, #0
 80017da:	f04f 0100 	mov.w	r1, #0
 80017de:	0159      	lsls	r1, r3, #5
 80017e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e4:	0150      	lsls	r0, r2, #5
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4621      	mov	r1, r4
 80017ec:	1a51      	subs	r1, r2, r1
 80017ee:	6439      	str	r1, [r7, #64]	@ 0x40
 80017f0:	4629      	mov	r1, r5
 80017f2:	eb63 0301 	sbc.w	r3, r3, r1
 80017f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001804:	4649      	mov	r1, r9
 8001806:	018b      	lsls	r3, r1, #6
 8001808:	4641      	mov	r1, r8
 800180a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800180e:	4641      	mov	r1, r8
 8001810:	018a      	lsls	r2, r1, #6
 8001812:	4641      	mov	r1, r8
 8001814:	1a51      	subs	r1, r2, r1
 8001816:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001818:	4649      	mov	r1, r9
 800181a:	eb63 0301 	sbc.w	r3, r3, r1
 800181e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800182c:	4649      	mov	r1, r9
 800182e:	00cb      	lsls	r3, r1, #3
 8001830:	4641      	mov	r1, r8
 8001832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001836:	4641      	mov	r1, r8
 8001838:	00ca      	lsls	r2, r1, #3
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	4603      	mov	r3, r0
 8001840:	4622      	mov	r2, r4
 8001842:	189b      	adds	r3, r3, r2
 8001844:	633b      	str	r3, [r7, #48]	@ 0x30
 8001846:	462b      	mov	r3, r5
 8001848:	460a      	mov	r2, r1
 800184a:	eb42 0303 	adc.w	r3, r2, r3
 800184e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800185c:	4629      	mov	r1, r5
 800185e:	024b      	lsls	r3, r1, #9
 8001860:	4621      	mov	r1, r4
 8001862:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001866:	4621      	mov	r1, r4
 8001868:	024a      	lsls	r2, r1, #9
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001872:	2200      	movs	r2, #0
 8001874:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001878:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800187c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001880:	f7fe fcc0 	bl	8000204 <__aeabi_uldivmod>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4613      	mov	r3, r2
 800188a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800188e:	e067      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001890:	4b75      	ldr	r3, [pc, #468]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	099b      	lsrs	r3, r3, #6
 8001896:	2200      	movs	r2, #0
 8001898:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800189c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80018a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80018aa:	2300      	movs	r3, #0
 80018ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80018b2:	4622      	mov	r2, r4
 80018b4:	462b      	mov	r3, r5
 80018b6:	f04f 0000 	mov.w	r0, #0
 80018ba:	f04f 0100 	mov.w	r1, #0
 80018be:	0159      	lsls	r1, r3, #5
 80018c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018c4:	0150      	lsls	r0, r2, #5
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4621      	mov	r1, r4
 80018cc:	1a51      	subs	r1, r2, r1
 80018ce:	62b9      	str	r1, [r7, #40]	@ 0x28
 80018d0:	4629      	mov	r1, r5
 80018d2:	eb63 0301 	sbc.w	r3, r3, r1
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80018e4:	4649      	mov	r1, r9
 80018e6:	018b      	lsls	r3, r1, #6
 80018e8:	4641      	mov	r1, r8
 80018ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ee:	4641      	mov	r1, r8
 80018f0:	018a      	lsls	r2, r1, #6
 80018f2:	4641      	mov	r1, r8
 80018f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80018f8:	4649      	mov	r1, r9
 80018fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800190a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800190e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001912:	4692      	mov	sl, r2
 8001914:	469b      	mov	fp, r3
 8001916:	4623      	mov	r3, r4
 8001918:	eb1a 0303 	adds.w	r3, sl, r3
 800191c:	623b      	str	r3, [r7, #32]
 800191e:	462b      	mov	r3, r5
 8001920:	eb4b 0303 	adc.w	r3, fp, r3
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001932:	4629      	mov	r1, r5
 8001934:	028b      	lsls	r3, r1, #10
 8001936:	4621      	mov	r1, r4
 8001938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800193c:	4621      	mov	r1, r4
 800193e:	028a      	lsls	r2, r1, #10
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001948:	2200      	movs	r2, #0
 800194a:	673b      	str	r3, [r7, #112]	@ 0x70
 800194c:	677a      	str	r2, [r7, #116]	@ 0x74
 800194e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001952:	f7fe fc57 	bl	8000204 <__aeabi_uldivmod>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4613      	mov	r3, r2
 800195c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001960:	4b41      	ldr	r3, [pc, #260]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	0c1b      	lsrs	r3, r3, #16
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	3301      	adds	r3, #1
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001972:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001976:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001982:	e0eb      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001984:	4b38      	ldr	r3, [pc, #224]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800198c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001990:	4b35      	ldr	r3, [pc, #212]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d06b      	beq.n	8001a74 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199c:	4b32      	ldr	r3, [pc, #200]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x354>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	099b      	lsrs	r3, r3, #6
 80019a2:	2200      	movs	r2, #0
 80019a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80019a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80019a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80019b0:	2300      	movs	r3, #0
 80019b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80019b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80019b8:	4622      	mov	r2, r4
 80019ba:	462b      	mov	r3, r5
 80019bc:	f04f 0000 	mov.w	r0, #0
 80019c0:	f04f 0100 	mov.w	r1, #0
 80019c4:	0159      	lsls	r1, r3, #5
 80019c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ca:	0150      	lsls	r0, r2, #5
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4621      	mov	r1, r4
 80019d2:	1a51      	subs	r1, r2, r1
 80019d4:	61b9      	str	r1, [r7, #24]
 80019d6:	4629      	mov	r1, r5
 80019d8:	eb63 0301 	sbc.w	r3, r3, r1
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80019ea:	4659      	mov	r1, fp
 80019ec:	018b      	lsls	r3, r1, #6
 80019ee:	4651      	mov	r1, sl
 80019f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019f4:	4651      	mov	r1, sl
 80019f6:	018a      	lsls	r2, r1, #6
 80019f8:	4651      	mov	r1, sl
 80019fa:	ebb2 0801 	subs.w	r8, r2, r1
 80019fe:	4659      	mov	r1, fp
 8001a00:	eb63 0901 	sbc.w	r9, r3, r1
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a18:	4690      	mov	r8, r2
 8001a1a:	4699      	mov	r9, r3
 8001a1c:	4623      	mov	r3, r4
 8001a1e:	eb18 0303 	adds.w	r3, r8, r3
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	462b      	mov	r3, r5
 8001a26:	eb49 0303 	adc.w	r3, r9, r3
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a38:	4629      	mov	r1, r5
 8001a3a:	024b      	lsls	r3, r1, #9
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a42:	4621      	mov	r1, r4
 8001a44:	024a      	lsls	r2, r1, #9
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a4e:	2200      	movs	r2, #0
 8001a50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a52:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001a54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a58:	f7fe fbd4 	bl	8000204 <__aeabi_uldivmod>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4613      	mov	r3, r2
 8001a62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001a66:	e065      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x420>
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	00f42400 	.word	0x00f42400
 8001a70:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a74:	4b3d      	ldr	r3, [pc, #244]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x458>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	099b      	lsrs	r3, r3, #6
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	4611      	mov	r1, r2
 8001a80:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a84:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a86:	2300      	movs	r3, #0
 8001a88:	657b      	str	r3, [r7, #84]	@ 0x54
 8001a8a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001a8e:	4642      	mov	r2, r8
 8001a90:	464b      	mov	r3, r9
 8001a92:	f04f 0000 	mov.w	r0, #0
 8001a96:	f04f 0100 	mov.w	r1, #0
 8001a9a:	0159      	lsls	r1, r3, #5
 8001a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa0:	0150      	lsls	r0, r2, #5
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4641      	mov	r1, r8
 8001aa8:	1a51      	subs	r1, r2, r1
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	4649      	mov	r1, r9
 8001aae:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001ac0:	4659      	mov	r1, fp
 8001ac2:	018b      	lsls	r3, r1, #6
 8001ac4:	4651      	mov	r1, sl
 8001ac6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aca:	4651      	mov	r1, sl
 8001acc:	018a      	lsls	r2, r1, #6
 8001ace:	4651      	mov	r1, sl
 8001ad0:	1a54      	subs	r4, r2, r1
 8001ad2:	4659      	mov	r1, fp
 8001ad4:	eb63 0501 	sbc.w	r5, r3, r1
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	00eb      	lsls	r3, r5, #3
 8001ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ae6:	00e2      	lsls	r2, r4, #3
 8001ae8:	4614      	mov	r4, r2
 8001aea:	461d      	mov	r5, r3
 8001aec:	4643      	mov	r3, r8
 8001aee:	18e3      	adds	r3, r4, r3
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	464b      	mov	r3, r9
 8001af4:	eb45 0303 	adc.w	r3, r5, r3
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b06:	4629      	mov	r1, r5
 8001b08:	028b      	lsls	r3, r1, #10
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b10:	4621      	mov	r1, r4
 8001b12:	028a      	lsls	r2, r1, #10
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b20:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b26:	f7fe fb6d 	bl	8000204 <__aeabi_uldivmod>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4613      	mov	r3, r2
 8001b30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b34:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x458>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	0f1b      	lsrs	r3, r3, #28
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001b42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b52:	e003      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001b56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	37b8      	adds	r7, #184	@ 0xb8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	00f42400 	.word	0x00f42400

08001b74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e28d      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8083 	beq.w	8001c9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b94:	4b94      	ldr	r3, [pc, #592]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d019      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ba0:	4b91      	ldr	r3, [pc, #580]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d106      	bne.n	8001bba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001bac:	4b8e      	ldr	r3, [pc, #568]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bb8:	d00c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bba:	4b8b      	ldr	r3, [pc, #556]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001bc2:	2b0c      	cmp	r3, #12
 8001bc4:	d112      	bne.n	8001bec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bc6:	4b88      	ldr	r3, [pc, #544]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bd2:	d10b      	bne.n	8001bec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd4:	4b84      	ldr	r3, [pc, #528]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d05b      	beq.n	8001c98 <HAL_RCC_OscConfig+0x124>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d157      	bne.n	8001c98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e25a      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bf4:	d106      	bne.n	8001c04 <HAL_RCC_OscConfig+0x90>
 8001bf6:	4b7c      	ldr	r3, [pc, #496]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a7b      	ldr	r2, [pc, #492]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e01d      	b.n	8001c40 <HAL_RCC_OscConfig+0xcc>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0xb4>
 8001c0e:	4b76      	ldr	r3, [pc, #472]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a75      	ldr	r2, [pc, #468]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b73      	ldr	r3, [pc, #460]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a72      	ldr	r2, [pc, #456]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0xcc>
 8001c28:	4b6f      	ldr	r3, [pc, #444]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a6e      	ldr	r2, [pc, #440]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b6c      	ldr	r3, [pc, #432]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a6b      	ldr	r2, [pc, #428]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d013      	beq.n	8001c70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff f8ec 	bl	8000e24 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff f8e8 	bl	8000e24 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	@ 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e21f      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c62:	4b61      	ldr	r3, [pc, #388]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0xdc>
 8001c6e:	e014      	b.n	8001c9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff f8d8 	bl	8000e24 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff f8d4 	bl	8000e24 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	@ 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e20b      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8a:	4b57      	ldr	r3, [pc, #348]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x104>
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d06f      	beq.n	8001d86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ca6:	4b50      	ldr	r3, [pc, #320]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d017      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001cb2:	4b4d      	ldr	r3, [pc, #308]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
        || \
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d105      	bne.n	8001cca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00b      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cca:	4b47      	ldr	r3, [pc, #284]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d11c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cd6:	4b44      	ldr	r3, [pc, #272]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d116      	bne.n	8001d10 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce2:	4b41      	ldr	r3, [pc, #260]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <HAL_RCC_OscConfig+0x186>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d001      	beq.n	8001cfa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e1d3      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4937      	ldr	r1, [pc, #220]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0e:	e03a      	b.n	8001d86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d020      	beq.n	8001d5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d18:	4b34      	ldr	r3, [pc, #208]	@ (8001dec <HAL_RCC_OscConfig+0x278>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1e:	f7ff f881 	bl	8000e24 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d26:	f7ff f87d 	bl	8000e24 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e1b4      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d38:	4b2b      	ldr	r3, [pc, #172]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0f0      	beq.n	8001d26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d44:	4b28      	ldr	r3, [pc, #160]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4925      	ldr	r1, [pc, #148]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	600b      	str	r3, [r1, #0]
 8001d58:	e015      	b.n	8001d86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d5a:	4b24      	ldr	r3, [pc, #144]	@ (8001dec <HAL_RCC_OscConfig+0x278>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7ff f860 	bl	8000e24 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d68:	f7ff f85c 	bl	8000e24 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e193      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d036      	beq.n	8001e00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d016      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da0:	f7ff f840 	bl	8000e24 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da8:	f7ff f83c 	bl	8000e24 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e173      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dba:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x234>
 8001dc6:	e01b      	b.n	8001e00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc8:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dce:	f7ff f829 	bl	8000e24 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd4:	e00e      	b.n	8001df4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd6:	f7ff f825 	bl	8000e24 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d907      	bls.n	8001df4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e15c      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
 8001de8:	40023800 	.word	0x40023800
 8001dec:	42470000 	.word	0x42470000
 8001df0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df4:	4b8a      	ldr	r3, [pc, #552]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001df6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1ea      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 8097 	beq.w	8001f3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e12:	4b83      	ldr	r3, [pc, #524]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10f      	bne.n	8001e3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	4b7f      	ldr	r3, [pc, #508]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	4a7e      	ldr	r2, [pc, #504]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2e:	4b7c      	ldr	r3, [pc, #496]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3e:	4b79      	ldr	r3, [pc, #484]	@ (8002024 <HAL_RCC_OscConfig+0x4b0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d118      	bne.n	8001e7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e4a:	4b76      	ldr	r3, [pc, #472]	@ (8002024 <HAL_RCC_OscConfig+0x4b0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a75      	ldr	r2, [pc, #468]	@ (8002024 <HAL_RCC_OscConfig+0x4b0>)
 8001e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e56:	f7fe ffe5 	bl	8000e24 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5e:	f7fe ffe1 	bl	8000e24 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e118      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e70:	4b6c      	ldr	r3, [pc, #432]	@ (8002024 <HAL_RCC_OscConfig+0x4b0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x31e>
 8001e84:	4b66      	ldr	r3, [pc, #408]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e88:	4a65      	ldr	r2, [pc, #404]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e90:	e01c      	b.n	8001ecc <HAL_RCC_OscConfig+0x358>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b05      	cmp	r3, #5
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x340>
 8001e9a:	4b61      	ldr	r3, [pc, #388]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9e:	4a60      	ldr	r2, [pc, #384]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001ea0:	f043 0304 	orr.w	r3, r3, #4
 8001ea4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ea6:	4b5e      	ldr	r3, [pc, #376]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eaa:	4a5d      	ldr	r2, [pc, #372]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_OscConfig+0x358>
 8001eb4:	4b5a      	ldr	r3, [pc, #360]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb8:	4a59      	ldr	r2, [pc, #356]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec0:	4b57      	ldr	r3, [pc, #348]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec4:	4a56      	ldr	r2, [pc, #344]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001ec6:	f023 0304 	bic.w	r3, r3, #4
 8001eca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d015      	beq.n	8001f00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed4:	f7fe ffa6 	bl	8000e24 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001edc:	f7fe ffa2 	bl	8000e24 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e0d7      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef2:	4b4b      	ldr	r3, [pc, #300]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0ee      	beq.n	8001edc <HAL_RCC_OscConfig+0x368>
 8001efe:	e014      	b.n	8001f2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7fe ff90 	bl	8000e24 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f08:	f7fe ff8c 	bl	8000e24 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e0c1      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1e:	4b40      	ldr	r3, [pc, #256]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1ee      	bne.n	8001f08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d105      	bne.n	8001f3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f30:	4b3b      	ldr	r3, [pc, #236]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f34:	4a3a      	ldr	r2, [pc, #232]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001f36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80ad 	beq.w	80020a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f46:	4b36      	ldr	r3, [pc, #216]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d060      	beq.n	8002014 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d145      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5a:	4b33      	ldr	r3, [pc, #204]	@ (8002028 <HAL_RCC_OscConfig+0x4b4>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7fe ff60 	bl	8000e24 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f68:	f7fe ff5c 	bl	8000e24 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e093      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7a:	4b29      	ldr	r3, [pc, #164]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69da      	ldr	r2, [r3, #28]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f94:	019b      	lsls	r3, r3, #6
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9c:	085b      	lsrs	r3, r3, #1
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	041b      	lsls	r3, r3, #16
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa8:	061b      	lsls	r3, r3, #24
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb0:	071b      	lsls	r3, r3, #28
 8001fb2:	491b      	ldr	r1, [pc, #108]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002028 <HAL_RCC_OscConfig+0x4b4>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbe:	f7fe ff31 	bl	8000e24 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7fe ff2d 	bl	8000e24 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e064      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd8:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x452>
 8001fe4:	e05c      	b.n	80020a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe6:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <HAL_RCC_OscConfig+0x4b4>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7fe ff1a 	bl	8000e24 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7fe ff16 	bl	8000e24 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e04d      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x480>
 8002012:	e045      	b.n	80020a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d107      	bne.n	800202c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e040      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
 8002020:	40023800 	.word	0x40023800
 8002024:	40007000 	.word	0x40007000
 8002028:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800202c:	4b1f      	ldr	r3, [pc, #124]	@ (80020ac <HAL_RCC_OscConfig+0x538>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d030      	beq.n	800209c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002044:	429a      	cmp	r2, r3
 8002046:	d129      	bne.n	800209c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d122      	bne.n	800209c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800205c:	4013      	ands	r3, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002062:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002064:	4293      	cmp	r3, r2
 8002066:	d119      	bne.n	800209c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002072:	085b      	lsrs	r3, r3, #1
 8002074:	3b01      	subs	r3, #1
 8002076:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d10f      	bne.n	800209c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002086:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d107      	bne.n	800209c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800

080020b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e042      	b.n	8002148 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe fd22 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2224      	movs	r2, #36	@ 0x24
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fdc9 	bl	8002c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002108:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002118:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002128:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	@ 0x28
 8002154:	af02      	add	r7, sp, #8
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b20      	cmp	r3, #32
 800216e:	d175      	bne.n	800225c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_UART_Transmit+0x2c>
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e06e      	b.n	800225e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2221      	movs	r2, #33	@ 0x21
 800218a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800218e:	f7fe fe49 	bl	8000e24 <HAL_GetTick>
 8002192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	88fa      	ldrh	r2, [r7, #6]
 8002198:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	88fa      	ldrh	r2, [r7, #6]
 800219e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021a8:	d108      	bne.n	80021bc <HAL_UART_Transmit+0x6c>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d104      	bne.n	80021bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	61bb      	str	r3, [r7, #24]
 80021ba:	e003      	b.n	80021c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021c4:	e02e      	b.n	8002224 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2200      	movs	r2, #0
 80021ce:	2180      	movs	r1, #128	@ 0x80
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 fb2d 	bl	8002830 <UART_WaitOnFlagUntilTimeout>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e03a      	b.n	800225e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10b      	bne.n	8002206 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	3302      	adds	r3, #2
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	e007      	b.n	8002216 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	3301      	adds	r3, #1
 8002214:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002228:	b29b      	uxth	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1cb      	bne.n	80021c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2200      	movs	r2, #0
 8002236:	2140      	movs	r1, #64	@ 0x40
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 faf9 	bl	8002830 <UART_WaitOnFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e006      	b.n	800225e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	e000      	b.n	800225e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800225c:	2302      	movs	r3, #2
  }
}
 800225e:	4618      	mov	r0, r3
 8002260:	3720      	adds	r7, #32
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	4613      	mov	r3, r2
 8002272:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b20      	cmp	r3, #32
 800227e:	d112      	bne.n	80022a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <HAL_UART_Receive_IT+0x26>
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e00b      	b.n	80022a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	461a      	mov	r2, r3
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 fb20 	bl	80028e2 <UART_Start_Receive_IT>
 80022a2:	4603      	mov	r3, r0
 80022a4:	e000      	b.n	80022a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80022a6:	2302      	movs	r3, #2
  }
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b0ba      	sub	sp, #232	@ 0xe8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80022ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10f      	bne.n	8002316 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022fa:	f003 0320 	and.w	r3, r3, #32
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_UART_IRQHandler+0x66>
 8002302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fbfd 	bl	8002b0e <UART_Receive_IT>
      return;
 8002314:	e273      	b.n	80027fe <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002316:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80de 	beq.w	80024dc <HAL_UART_IRQHandler+0x22c>
 8002320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d106      	bne.n	800233a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800232c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002330:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80d1 	beq.w	80024dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800233a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_UART_IRQHandler+0xae>
 8002346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800234a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	f043 0201 	orr.w	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800235e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_UART_IRQHandler+0xd2>
 800236a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	f043 0202 	orr.w	r2, r3, #2
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00b      	beq.n	80023a6 <HAL_UART_IRQHandler+0xf6>
 800238e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239e:	f043 0204 	orr.w	r2, r3, #4
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80023a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d011      	beq.n	80023d6 <HAL_UART_IRQHandler+0x126>
 80023b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d105      	bne.n	80023ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80023be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d005      	beq.n	80023d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	f043 0208 	orr.w	r2, r3, #8
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 820a 	beq.w	80027f4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_UART_IRQHandler+0x14e>
 80023ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023f0:	f003 0320 	and.w	r3, r3, #32
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fb88 	bl	8002b0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002408:	2b40      	cmp	r3, #64	@ 0x40
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d103      	bne.n	800242a <HAL_UART_IRQHandler+0x17a>
 8002422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002426:	2b00      	cmp	r3, #0
 8002428:	d04f      	beq.n	80024ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fa93 	bl	8002956 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800243a:	2b40      	cmp	r3, #64	@ 0x40
 800243c:	d141      	bne.n	80024c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3314      	adds	r3, #20
 8002444:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002448:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800244c:	e853 3f00 	ldrex	r3, [r3]
 8002450:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002454:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002458:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800245c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	3314      	adds	r3, #20
 8002466:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800246a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800246e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002472:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002476:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800247a:	e841 2300 	strex	r3, r2, [r1]
 800247e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1d9      	bne.n	800243e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248e:	2b00      	cmp	r3, #0
 8002490:	d013      	beq.n	80024ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002496:	4a8a      	ldr	r2, [pc, #552]	@ (80026c0 <HAL_UART_IRQHandler+0x410>)
 8002498:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fe4d 	bl	800113e <HAL_DMA_Abort_IT>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d016      	beq.n	80024d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024b4:	4610      	mov	r0, r2
 80024b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b8:	e00e      	b.n	80024d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fe f894 	bl	80005e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c0:	e00a      	b.n	80024d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe f890 	bl	80005e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c8:	e006      	b.n	80024d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe f88c 	bl	80005e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80024d6:	e18d      	b.n	80027f4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d8:	bf00      	nop
    return;
 80024da:	e18b      	b.n	80027f4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	f040 8167 	bne.w	80027b4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8160 	beq.w	80027b4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80024f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8159 	beq.w	80027b4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002522:	2b40      	cmp	r3, #64	@ 0x40
 8002524:	f040 80ce 	bne.w	80026c4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002534:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80a9 	beq.w	8002690 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002542:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002546:	429a      	cmp	r2, r3
 8002548:	f080 80a2 	bcs.w	8002690 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002552:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800255e:	f000 8088 	beq.w	8002672 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	330c      	adds	r3, #12
 8002568:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800256c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002570:	e853 3f00 	ldrex	r3, [r3]
 8002574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002578:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800257c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002580:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	330c      	adds	r3, #12
 800258a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800258e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002592:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002596:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800259a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800259e:	e841 2300 	strex	r3, r2, [r1]
 80025a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80025a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1d9      	bne.n	8002562 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3314      	adds	r3, #20
 80025b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025b8:	e853 3f00 	ldrex	r3, [r3]
 80025bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80025be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3314      	adds	r3, #20
 80025ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80025d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80025d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80025da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80025de:	e841 2300 	strex	r3, r2, [r1]
 80025e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80025e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1e1      	bne.n	80025ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3314      	adds	r3, #20
 80025f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025f4:	e853 3f00 	ldrex	r3, [r3]
 80025f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80025fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002600:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	3314      	adds	r3, #20
 800260a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800260e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002610:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002612:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002614:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002616:	e841 2300 	strex	r3, r2, [r1]
 800261a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800261c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1e3      	bne.n	80025ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2220      	movs	r2, #32
 8002626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	330c      	adds	r3, #12
 8002636:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800263a:	e853 3f00 	ldrex	r3, [r3]
 800263e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002640:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002642:	f023 0310 	bic.w	r3, r3, #16
 8002646:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	330c      	adds	r3, #12
 8002650:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002654:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002656:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002658:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800265a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800265c:	e841 2300 	strex	r3, r2, [r1]
 8002660:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002662:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1e3      	bne.n	8002630 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800266c:	4618      	mov	r0, r3
 800266e:	f7fe fcf6 	bl	800105e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2202      	movs	r2, #2
 8002676:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002680:	b29b      	uxth	r3, r3
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	b29b      	uxth	r3, r3
 8002686:	4619      	mov	r1, r3
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f8c5 	bl	8002818 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800268e:	e0b3      	b.n	80027f8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002694:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002698:	429a      	cmp	r2, r3
 800269a:	f040 80ad 	bne.w	80027f8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026a8:	f040 80a6 	bne.w	80027f8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80026b6:	4619      	mov	r1, r3
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f8ad 	bl	8002818 <HAL_UARTEx_RxEventCallback>
      return;
 80026be:	e09b      	b.n	80027f8 <HAL_UART_IRQHandler+0x548>
 80026c0:	08002a1d 	.word	0x08002a1d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 808e 	beq.w	80027fc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80026e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8089 	beq.w	80027fc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	330c      	adds	r3, #12
 80026f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f4:	e853 3f00 	ldrex	r3, [r3]
 80026f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80026fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002700:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	330c      	adds	r3, #12
 800270a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800270e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002710:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002712:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002714:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002716:	e841 2300 	strex	r3, r2, [r1]
 800271a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800271c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1e3      	bne.n	80026ea <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3314      	adds	r3, #20
 8002728:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	e853 3f00 	ldrex	r3, [r3]
 8002730:	623b      	str	r3, [r7, #32]
   return(result);
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3314      	adds	r3, #20
 8002742:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002746:	633a      	str	r2, [r7, #48]	@ 0x30
 8002748:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800274c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800274e:	e841 2300 	strex	r3, r2, [r1]
 8002752:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1e3      	bne.n	8002722 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	330c      	adds	r3, #12
 800276e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	e853 3f00 	ldrex	r3, [r3]
 8002776:	60fb      	str	r3, [r7, #12]
   return(result);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0310 	bic.w	r3, r3, #16
 800277e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	330c      	adds	r3, #12
 8002788:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800278c:	61fa      	str	r2, [r7, #28]
 800278e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002790:	69b9      	ldr	r1, [r7, #24]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	e841 2300 	strex	r3, r2, [r1]
 8002798:	617b      	str	r3, [r7, #20]
   return(result);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e3      	bne.n	8002768 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80027aa:	4619      	mov	r1, r3
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f833 	bl	8002818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027b2:	e023      	b.n	80027fc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d009      	beq.n	80027d4 <HAL_UART_IRQHandler+0x524>
 80027c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f936 	bl	8002a3e <UART_Transmit_IT>
    return;
 80027d2:	e014      	b.n	80027fe <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00e      	beq.n	80027fe <HAL_UART_IRQHandler+0x54e>
 80027e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f976 	bl	8002ade <UART_EndTransmit_IT>
    return;
 80027f2:	e004      	b.n	80027fe <HAL_UART_IRQHandler+0x54e>
    return;
 80027f4:	bf00      	nop
 80027f6:	e002      	b.n	80027fe <HAL_UART_IRQHandler+0x54e>
      return;
 80027f8:	bf00      	nop
 80027fa:	e000      	b.n	80027fe <HAL_UART_IRQHandler+0x54e>
      return;
 80027fc:	bf00      	nop
  }
}
 80027fe:	37e8      	adds	r7, #232	@ 0xe8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002840:	e03b      	b.n	80028ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d037      	beq.n	80028ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284a:	f7fe faeb 	bl	8000e24 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	6a3a      	ldr	r2, [r7, #32]
 8002856:	429a      	cmp	r2, r3
 8002858:	d302      	bcc.n	8002860 <UART_WaitOnFlagUntilTimeout+0x30>
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e03a      	b.n	80028da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d023      	beq.n	80028ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b80      	cmp	r3, #128	@ 0x80
 8002876:	d020      	beq.n	80028ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b40      	cmp	r3, #64	@ 0x40
 800287c:	d01d      	beq.n	80028ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b08      	cmp	r3, #8
 800288a:	d116      	bne.n	80028ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f857 	bl	8002956 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2208      	movs	r2, #8
 80028ac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e00f      	b.n	80028da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4013      	ands	r3, r2
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	bf0c      	ite	eq
 80028ca:	2301      	moveq	r3, #1
 80028cc:	2300      	movne	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d0b4      	beq.n	8002842 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	4613      	mov	r3, r2
 80028ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	88fa      	ldrh	r2, [r7, #6]
 80028fa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	88fa      	ldrh	r2, [r7, #6]
 8002900:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2222      	movs	r2, #34	@ 0x22
 800290c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002926:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0220 	orr.w	r2, r2, #32
 8002946:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002956:	b480      	push	{r7}
 8002958:	b095      	sub	sp, #84	@ 0x54
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	330c      	adds	r3, #12
 8002964:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002968:	e853 3f00 	ldrex	r3, [r3]
 800296c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800296e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002970:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002974:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	330c      	adds	r3, #12
 800297c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800297e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002980:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002982:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002984:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002986:	e841 2300 	strex	r3, r2, [r1]
 800298a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800298c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e5      	bne.n	800295e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3314      	adds	r3, #20
 8002998:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	e853 3f00 	ldrex	r3, [r3]
 80029a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3314      	adds	r3, #20
 80029b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029ba:	e841 2300 	strex	r3, r2, [r1]
 80029be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1e5      	bne.n	8002992 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d119      	bne.n	8002a02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	330c      	adds	r3, #12
 80029d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	e853 3f00 	ldrex	r3, [r3]
 80029dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f023 0310 	bic.w	r3, r3, #16
 80029e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	330c      	adds	r3, #12
 80029ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029ee:	61ba      	str	r2, [r7, #24]
 80029f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f2:	6979      	ldr	r1, [r7, #20]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	e841 2300 	strex	r3, r2, [r1]
 80029fa:	613b      	str	r3, [r7, #16]
   return(result);
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1e5      	bne.n	80029ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a10:	bf00      	nop
 8002a12:	3754      	adds	r7, #84	@ 0x54
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f7fd fdd9 	bl	80005e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b21      	cmp	r3, #33	@ 0x21
 8002a50:	d13e      	bne.n	8002ad0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a5a:	d114      	bne.n	8002a86 <UART_Transmit_IT+0x48>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d110      	bne.n	8002a86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	1c9a      	adds	r2, r3, #2
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	621a      	str	r2, [r3, #32]
 8002a84:	e008      	b.n	8002a98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	1c59      	adds	r1, r3, #1
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6211      	str	r1, [r2, #32]
 8002a90:	781a      	ldrb	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10f      	bne.n	8002acc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002aca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	e000      	b.n	8002ad2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ad0:	2302      	movs	r3, #2
  }
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002af4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff fe80 	bl	8002804 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b08c      	sub	sp, #48	@ 0x30
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b22      	cmp	r3, #34	@ 0x22
 8002b28:	f040 80aa 	bne.w	8002c80 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b34:	d115      	bne.n	8002b62 <UART_Receive_IT+0x54>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d111      	bne.n	8002b62 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b42:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5a:	1c9a      	adds	r2, r3, #2
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b60:	e024      	b.n	8002bac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b70:	d007      	beq.n	8002b82 <UART_Receive_IT+0x74>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10a      	bne.n	8002b90 <UART_Receive_IT+0x82>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e008      	b.n	8002ba2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d15d      	bne.n	8002c7c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0220 	bic.w	r2, r2, #32
 8002bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d135      	bne.n	8002c72 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	330c      	adds	r3, #12
 8002c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	e853 3f00 	ldrex	r3, [r3]
 8002c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f023 0310 	bic.w	r3, r3, #16
 8002c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	330c      	adds	r3, #12
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c2c:	623a      	str	r2, [r7, #32]
 8002c2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c30:	69f9      	ldr	r1, [r7, #28]
 8002c32:	6a3a      	ldr	r2, [r7, #32]
 8002c34:	e841 2300 	strex	r3, r2, [r1]
 8002c38:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1e5      	bne.n	8002c0c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b10      	cmp	r3, #16
 8002c4c:	d10a      	bne.n	8002c64 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c68:	4619      	mov	r1, r3
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff fdd4 	bl	8002818 <HAL_UARTEx_RxEventCallback>
 8002c70:	e002      	b.n	8002c78 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fd fc9e 	bl	80005b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e002      	b.n	8002c82 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e000      	b.n	8002c82 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002c80:	2302      	movs	r3, #2
  }
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3730      	adds	r7, #48	@ 0x30
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c90:	b0c0      	sub	sp, #256	@ 0x100
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca8:	68d9      	ldr	r1, [r3, #12]
 8002caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	ea40 0301 	orr.w	r3, r0, r1
 8002cb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ce4:	f021 010c 	bic.w	r1, r1, #12
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002cf2:	430b      	orrs	r3, r1
 8002cf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d06:	6999      	ldr	r1, [r3, #24]
 8002d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	ea40 0301 	orr.w	r3, r0, r1
 8002d12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4b8f      	ldr	r3, [pc, #572]	@ (8002f58 <UART_SetConfig+0x2cc>)
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d005      	beq.n	8002d2c <UART_SetConfig+0xa0>
 8002d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4b8d      	ldr	r3, [pc, #564]	@ (8002f5c <UART_SetConfig+0x2d0>)
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d104      	bne.n	8002d36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d2c:	f7fe fcde 	bl	80016ec <HAL_RCC_GetPCLK2Freq>
 8002d30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d34:	e003      	b.n	8002d3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d36:	f7fe fcc5 	bl	80016c4 <HAL_RCC_GetPCLK1Freq>
 8002d3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d48:	f040 810c 	bne.w	8002f64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d50:	2200      	movs	r2, #0
 8002d52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d5e:	4622      	mov	r2, r4
 8002d60:	462b      	mov	r3, r5
 8002d62:	1891      	adds	r1, r2, r2
 8002d64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d66:	415b      	adcs	r3, r3
 8002d68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d6e:	4621      	mov	r1, r4
 8002d70:	eb12 0801 	adds.w	r8, r2, r1
 8002d74:	4629      	mov	r1, r5
 8002d76:	eb43 0901 	adc.w	r9, r3, r1
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d8e:	4690      	mov	r8, r2
 8002d90:	4699      	mov	r9, r3
 8002d92:	4623      	mov	r3, r4
 8002d94:	eb18 0303 	adds.w	r3, r8, r3
 8002d98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d9c:	462b      	mov	r3, r5
 8002d9e:	eb49 0303 	adc.w	r3, r9, r3
 8002da2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002db2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002db6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002dba:	460b      	mov	r3, r1
 8002dbc:	18db      	adds	r3, r3, r3
 8002dbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	eb42 0303 	adc.w	r3, r2, r3
 8002dc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002dcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002dd0:	f7fd fa18 	bl	8000204 <__aeabi_uldivmod>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4b61      	ldr	r3, [pc, #388]	@ (8002f60 <UART_SetConfig+0x2d4>)
 8002dda:	fba3 2302 	umull	r2, r3, r3, r2
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	011c      	lsls	r4, r3, #4
 8002de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002dec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002df0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002df4:	4642      	mov	r2, r8
 8002df6:	464b      	mov	r3, r9
 8002df8:	1891      	adds	r1, r2, r2
 8002dfa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002dfc:	415b      	adcs	r3, r3
 8002dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e04:	4641      	mov	r1, r8
 8002e06:	eb12 0a01 	adds.w	sl, r2, r1
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	eb43 0b01 	adc.w	fp, r3, r1
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e24:	4692      	mov	sl, r2
 8002e26:	469b      	mov	fp, r3
 8002e28:	4643      	mov	r3, r8
 8002e2a:	eb1a 0303 	adds.w	r3, sl, r3
 8002e2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e32:	464b      	mov	r3, r9
 8002e34:	eb4b 0303 	adc.w	r3, fp, r3
 8002e38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e50:	460b      	mov	r3, r1
 8002e52:	18db      	adds	r3, r3, r3
 8002e54:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e56:	4613      	mov	r3, r2
 8002e58:	eb42 0303 	adc.w	r3, r2, r3
 8002e5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e66:	f7fd f9cd 	bl	8000204 <__aeabi_uldivmod>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4b3b      	ldr	r3, [pc, #236]	@ (8002f60 <UART_SetConfig+0x2d4>)
 8002e72:	fba3 2301 	umull	r2, r3, r3, r1
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	2264      	movs	r2, #100	@ 0x64
 8002e7a:	fb02 f303 	mul.w	r3, r2, r3
 8002e7e:	1acb      	subs	r3, r1, r3
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e86:	4b36      	ldr	r3, [pc, #216]	@ (8002f60 <UART_SetConfig+0x2d4>)
 8002e88:	fba3 2302 	umull	r2, r3, r3, r2
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e94:	441c      	add	r4, r3
 8002e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ea0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ea4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	464b      	mov	r3, r9
 8002eac:	1891      	adds	r1, r2, r2
 8002eae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002eb0:	415b      	adcs	r3, r3
 8002eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002eb8:	4641      	mov	r1, r8
 8002eba:	1851      	adds	r1, r2, r1
 8002ebc:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ebe:	4649      	mov	r1, r9
 8002ec0:	414b      	adcs	r3, r1
 8002ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ed0:	4659      	mov	r1, fp
 8002ed2:	00cb      	lsls	r3, r1, #3
 8002ed4:	4651      	mov	r1, sl
 8002ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eda:	4651      	mov	r1, sl
 8002edc:	00ca      	lsls	r2, r1, #3
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4642      	mov	r2, r8
 8002ee6:	189b      	adds	r3, r3, r2
 8002ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002eec:	464b      	mov	r3, r9
 8002eee:	460a      	mov	r2, r1
 8002ef0:	eb42 0303 	adc.w	r3, r2, r3
 8002ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	18db      	adds	r3, r3, r3
 8002f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f12:	4613      	mov	r3, r2
 8002f14:	eb42 0303 	adc.w	r3, r2, r3
 8002f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f22:	f7fd f96f 	bl	8000204 <__aeabi_uldivmod>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f60 <UART_SetConfig+0x2d4>)
 8002f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	2164      	movs	r1, #100	@ 0x64
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	3332      	adds	r3, #50	@ 0x32
 8002f3e:	4a08      	ldr	r2, [pc, #32]	@ (8002f60 <UART_SetConfig+0x2d4>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	f003 0207 	and.w	r2, r3, #7
 8002f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4422      	add	r2, r4
 8002f52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f54:	e106      	b.n	8003164 <UART_SetConfig+0x4d8>
 8002f56:	bf00      	nop
 8002f58:	40011000 	.word	0x40011000
 8002f5c:	40011400 	.word	0x40011400
 8002f60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f76:	4642      	mov	r2, r8
 8002f78:	464b      	mov	r3, r9
 8002f7a:	1891      	adds	r1, r2, r2
 8002f7c:	6239      	str	r1, [r7, #32]
 8002f7e:	415b      	adcs	r3, r3
 8002f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f86:	4641      	mov	r1, r8
 8002f88:	1854      	adds	r4, r2, r1
 8002f8a:	4649      	mov	r1, r9
 8002f8c:	eb43 0501 	adc.w	r5, r3, r1
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	00eb      	lsls	r3, r5, #3
 8002f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f9e:	00e2      	lsls	r2, r4, #3
 8002fa0:	4614      	mov	r4, r2
 8002fa2:	461d      	mov	r5, r3
 8002fa4:	4643      	mov	r3, r8
 8002fa6:	18e3      	adds	r3, r4, r3
 8002fa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fac:	464b      	mov	r3, r9
 8002fae:	eb45 0303 	adc.w	r3, r5, r3
 8002fb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	008b      	lsls	r3, r1, #2
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fdc:	4621      	mov	r1, r4
 8002fde:	008a      	lsls	r2, r1, #2
 8002fe0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002fe4:	f7fd f90e 	bl	8000204 <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4b60      	ldr	r3, [pc, #384]	@ (8003170 <UART_SetConfig+0x4e4>)
 8002fee:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	011c      	lsls	r4, r3, #4
 8002ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003000:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003004:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003008:	4642      	mov	r2, r8
 800300a:	464b      	mov	r3, r9
 800300c:	1891      	adds	r1, r2, r2
 800300e:	61b9      	str	r1, [r7, #24]
 8003010:	415b      	adcs	r3, r3
 8003012:	61fb      	str	r3, [r7, #28]
 8003014:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003018:	4641      	mov	r1, r8
 800301a:	1851      	adds	r1, r2, r1
 800301c:	6139      	str	r1, [r7, #16]
 800301e:	4649      	mov	r1, r9
 8003020:	414b      	adcs	r3, r1
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003030:	4659      	mov	r1, fp
 8003032:	00cb      	lsls	r3, r1, #3
 8003034:	4651      	mov	r1, sl
 8003036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800303a:	4651      	mov	r1, sl
 800303c:	00ca      	lsls	r2, r1, #3
 800303e:	4610      	mov	r0, r2
 8003040:	4619      	mov	r1, r3
 8003042:	4603      	mov	r3, r0
 8003044:	4642      	mov	r2, r8
 8003046:	189b      	adds	r3, r3, r2
 8003048:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800304c:	464b      	mov	r3, r9
 800304e:	460a      	mov	r2, r1
 8003050:	eb42 0303 	adc.w	r3, r2, r3
 8003054:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003062:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003070:	4649      	mov	r1, r9
 8003072:	008b      	lsls	r3, r1, #2
 8003074:	4641      	mov	r1, r8
 8003076:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800307a:	4641      	mov	r1, r8
 800307c:	008a      	lsls	r2, r1, #2
 800307e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003082:	f7fd f8bf 	bl	8000204 <__aeabi_uldivmod>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4611      	mov	r1, r2
 800308c:	4b38      	ldr	r3, [pc, #224]	@ (8003170 <UART_SetConfig+0x4e4>)
 800308e:	fba3 2301 	umull	r2, r3, r3, r1
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	2264      	movs	r2, #100	@ 0x64
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	1acb      	subs	r3, r1, r3
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	3332      	adds	r3, #50	@ 0x32
 80030a0:	4a33      	ldr	r2, [pc, #204]	@ (8003170 <UART_SetConfig+0x4e4>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030ac:	441c      	add	r4, r3
 80030ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030b2:	2200      	movs	r2, #0
 80030b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80030b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80030b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80030bc:	4642      	mov	r2, r8
 80030be:	464b      	mov	r3, r9
 80030c0:	1891      	adds	r1, r2, r2
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	415b      	adcs	r3, r3
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030cc:	4641      	mov	r1, r8
 80030ce:	1851      	adds	r1, r2, r1
 80030d0:	6039      	str	r1, [r7, #0]
 80030d2:	4649      	mov	r1, r9
 80030d4:	414b      	adcs	r3, r1
 80030d6:	607b      	str	r3, [r7, #4]
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030e4:	4659      	mov	r1, fp
 80030e6:	00cb      	lsls	r3, r1, #3
 80030e8:	4651      	mov	r1, sl
 80030ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ee:	4651      	mov	r1, sl
 80030f0:	00ca      	lsls	r2, r1, #3
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	4603      	mov	r3, r0
 80030f8:	4642      	mov	r2, r8
 80030fa:	189b      	adds	r3, r3, r2
 80030fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030fe:	464b      	mov	r3, r9
 8003100:	460a      	mov	r2, r1
 8003102:	eb42 0303 	adc.w	r3, r2, r3
 8003106:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	663b      	str	r3, [r7, #96]	@ 0x60
 8003112:	667a      	str	r2, [r7, #100]	@ 0x64
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003120:	4649      	mov	r1, r9
 8003122:	008b      	lsls	r3, r1, #2
 8003124:	4641      	mov	r1, r8
 8003126:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800312a:	4641      	mov	r1, r8
 800312c:	008a      	lsls	r2, r1, #2
 800312e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003132:	f7fd f867 	bl	8000204 <__aeabi_uldivmod>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4b0d      	ldr	r3, [pc, #52]	@ (8003170 <UART_SetConfig+0x4e4>)
 800313c:	fba3 1302 	umull	r1, r3, r3, r2
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	2164      	movs	r1, #100	@ 0x64
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	3332      	adds	r3, #50	@ 0x32
 800314e:	4a08      	ldr	r2, [pc, #32]	@ (8003170 <UART_SetConfig+0x4e4>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	f003 020f 	and.w	r2, r3, #15
 800315a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4422      	add	r2, r4
 8003162:	609a      	str	r2, [r3, #8]
}
 8003164:	bf00      	nop
 8003166:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800316a:	46bd      	mov	sp, r7
 800316c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003170:	51eb851f 	.word	0x51eb851f

08003174 <memset>:
 8003174:	4402      	add	r2, r0
 8003176:	4603      	mov	r3, r0
 8003178:	4293      	cmp	r3, r2
 800317a:	d100      	bne.n	800317e <memset+0xa>
 800317c:	4770      	bx	lr
 800317e:	f803 1b01 	strb.w	r1, [r3], #1
 8003182:	e7f9      	b.n	8003178 <memset+0x4>

08003184 <__libc_init_array>:
 8003184:	b570      	push	{r4, r5, r6, lr}
 8003186:	4d0d      	ldr	r5, [pc, #52]	@ (80031bc <__libc_init_array+0x38>)
 8003188:	4c0d      	ldr	r4, [pc, #52]	@ (80031c0 <__libc_init_array+0x3c>)
 800318a:	1b64      	subs	r4, r4, r5
 800318c:	10a4      	asrs	r4, r4, #2
 800318e:	2600      	movs	r6, #0
 8003190:	42a6      	cmp	r6, r4
 8003192:	d109      	bne.n	80031a8 <__libc_init_array+0x24>
 8003194:	4d0b      	ldr	r5, [pc, #44]	@ (80031c4 <__libc_init_array+0x40>)
 8003196:	4c0c      	ldr	r4, [pc, #48]	@ (80031c8 <__libc_init_array+0x44>)
 8003198:	f000 f818 	bl	80031cc <_init>
 800319c:	1b64      	subs	r4, r4, r5
 800319e:	10a4      	asrs	r4, r4, #2
 80031a0:	2600      	movs	r6, #0
 80031a2:	42a6      	cmp	r6, r4
 80031a4:	d105      	bne.n	80031b2 <__libc_init_array+0x2e>
 80031a6:	bd70      	pop	{r4, r5, r6, pc}
 80031a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ac:	4798      	blx	r3
 80031ae:	3601      	adds	r6, #1
 80031b0:	e7ee      	b.n	8003190 <__libc_init_array+0xc>
 80031b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b6:	4798      	blx	r3
 80031b8:	3601      	adds	r6, #1
 80031ba:	e7f2      	b.n	80031a2 <__libc_init_array+0x1e>
 80031bc:	080032e8 	.word	0x080032e8
 80031c0:	080032e8 	.word	0x080032e8
 80031c4:	080032e8 	.word	0x080032e8
 80031c8:	080032ec 	.word	0x080032ec

080031cc <_init>:
 80031cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ce:	bf00      	nop
 80031d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031d2:	bc08      	pop	{r3}
 80031d4:	469e      	mov	lr, r3
 80031d6:	4770      	bx	lr

080031d8 <_fini>:
 80031d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031da:	bf00      	nop
 80031dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031de:	bc08      	pop	{r3}
 80031e0:	469e      	mov	lr, r3
 80031e2:	4770      	bx	lr
